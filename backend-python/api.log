2025-06-21 16:48:21,486 - INFO
Loading faiss with AVX2 support.
2025-06-21 16:48:21,502 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-21 16:48:21,505 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-21 16:48:26,545 - INFO
Client: Address(host='127.0.0.1', port=42780)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-21 16:53:27,978 - INFO
Loading faiss with AVX2 support.
2025-06-21 16:53:27,994 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-21 16:53:27,998 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-21 16:53:33,033 - INFO
Client: Address(host='127.0.0.1', port=51452)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-21 16:53:33,318 - INFO
Client: Address(host='127.0.0.1', port=51452)
Url: http://127.0.0.1:8001/switch-model
Body: {"model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", "strategy": "cuda fp16", "tokenizer": "", "customCuda": true, "deploy": false}
Data:
Exception: No module named 'rwkv_pip'

2025-06-22 17:05:30,508 - INFO
Loading faiss with AVX2 support.
2025-06-22 17:05:30,531 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-22 17:05:30,535 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-22 17:05:35,569 - INFO
Client: Address(host='127.0.0.1', port=49736)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-22 21:13:32,949 - INFO
Loading faiss with AVX2 support.
2025-06-22 21:13:32,965 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-22 21:13:32,968 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-22 21:13:38,001 - INFO
Client: Address(host='127.0.0.1', port=34614)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-22 21:15:27,443 - INFO
Client: Address(host='127.0.0.1', port=35872)
Url: http://localhost:9001/v1/chat/completions
Body: b'{\r\n  "messages": [        \n    {\r\n      "role": "user",     \n      "content": "hello",\r\n      "raw": false       \n    }\r\n  ],                   \r\n  "session_id": "session-id"     \n}'

2025-06-22 21:15:27,454 - INFO
Client: Address(host='127.0.0.1', port=35872)
Url: http://localhost:9001/v1/chat/completions
Data:
Start Waiting. RequestsNum: 1

2025-06-22 21:15:27,454 - INFO
Client: 
Url: 
Data:
Generation Prompt:
User: hello

Assistant:

2025-06-22 21:15:29,755 - INFO
Client: Address(host='127.0.0.1', port=35872)
Url: http://localhost:9001/v1/chat/completions
Body: {"max_tokens": null, "temperature": null, "top_p": null, "presence_penalty": null, "frequency_penalty": null, "penalty_decay": null, "top_k": null, "global_penalty": null, "state": null, "messages": [{"content": "hello", "role": "user", "name": null, "raw": false}], "model": "rwkv", "stream": false, "stop": ["\n\nUser", "\n\nQuestion", "\n\nQ", "\n\nHuman", "\n\nBob", "\n\nAssistant", "\n\nAnswer", "\n\nA", "\n\nBot", "\n\nAlice", "\n\nObservation", "\n\nUser", "\n\nAss"], "tools": null, "tool_choice": "auto", "user_name": null, "assistant_name": null, "system_name": null, "presystem": false, "session_id": "session-id", "isTeacher": false, "courseID": null}
Data:
 Hello! How can I assist you today?
Finished. RequestsNum: 0

2025-06-23 11:12:07,806 - INFO
Loading faiss with AVX2 support.
2025-06-23 11:12:07,821 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 11:12:07,824 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:15:29,411 - INFO
Loading faiss with AVX2 support.
2025-06-23 11:15:29,427 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 11:15:29,430 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:15:34,492 - INFO
Client: Address(host='127.0.0.1', port=56060)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 11:15:53,596 - INFO
Client: Address(host='127.0.0.1', port=56060)
Url: http://127.0.0.1:8001/switch-model
Body: {"model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", "strategy": "cuda fp16", "tokenizer": "", "customCuda": true, "deploy": false}
Data:
Exception: CUDA out of memory. Tried to allocate 112.00 MiB. GPU 0 has a total capacty of 23.57 GiB of which 22.56 MiB is free. Process 1782656 has 15.50 GiB memory in use. Including non-PyTorch memory, this process has 8.04 GiB memory in use. Of the allocated memory 7.44 GiB is allocated by PyTorch, and 311.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF

2025-06-23 11:16:53,078 - INFO
Loading faiss with AVX2 support.
2025-06-23 11:16:53,093 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 11:16:53,096 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:16:58,157 - INFO
Client: Address(host='127.0.0.1', port=45214)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 11:17:10,827 - INFO
Client: Address(host='127.0.0.1', port=45214)
Url: http://127.0.0.1:8001/switch-model
Body: {"model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", "strategy": "cuda fp16", "tokenizer": "", "customCuda": true, "deploy": false}
Data:
Exception: CUDA out of memory. Tried to allocate 112.00 MiB. GPU 0 has a total capacty of 23.57 GiB of which 38.56 MiB is free. Process 1786554 has 20.99 GiB memory in use. Including non-PyTorch memory, this process has 2.52 GiB memory in use. Of the allocated memory 2.07 GiB is allocated by PyTorch, and 172.22 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF

2025-06-23 11:19:28,740 - INFO
Loading faiss with AVX2 support.
2025-06-23 11:19:28,755 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 11:19:28,758 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:19:33,813 - INFO
Client: Address(host='127.0.0.1', port=59714)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 11:23:44,702 - INFO
Client: Address(host='127.0.0.1', port=54578)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "teacher123",\r\n    "courseID": "math101", \r\n    "lessonNum": "lesson01",\r\n    "max_words": 1000\r\n}'

2025-06-23 11:24:47,927 - INFO
Client: Address(host='127.0.0.1', port=38732)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1", \r\n    "lessonNum": "1",\r\n    "max_words": 2000\r\n}'

2025-06-23 11:25:45,391 - INFO
Client: Address(host='127.0.0.1', port=53186)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1", \r\n    "lessonNum": "1",\r\n    "max_words": 2000\r\n}'

2025-06-23 11:25:45,395 - INFO
Client: 
Url: 
Data:
Generation Prompt:
请根据以下课时内容，生成一份详细的课时教学大纲。

要求：
1. 大纲结构清晰，包含教学目标、教学内容、教学步骤
2. 字数严格控制在2000字以内，但是要保证最后一句话完整可读。
3. 突出教学重点和难点
4. 包含教学建议和注意事项
5. 适合单次课时教学使用

课时内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- mybatis与springBoot的整合包 -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.3.1</version>
    </dependency>
    <!-- mysql驱动包 -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
3.配置信息。

3.1.自动配置

3.2.手动配置

4.数据准备

数据库、表、实体类
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>
</dependencies>
// 启动类,申明当前类是SpringBoot项目的启动类，默认端口是8080
@SpringBootApplication
// 扫描mapper接口所在的包，生成代理对象，保存到IOC容器中，后续给Service注入使用
@MapperScan("cn.cd.mapper")
public class App {
    public static void main(String[] args) {
        //使用启动类App去启动一个Spring应用
        SpringApplication.run(App.class, args);
    }
}
server:
  port: 8080 # 端口浩
  servlet:
    context-path: / # 上下文路径
# 连接数据库的四大金刚
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/edu?useUnicode=true&characterEncoding=utf-
8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
# mybatis配置
mybatis:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mapper/*Mapper.xml
create table t_user(
    id bigint primary key auto_increment,
    name varchar(50),
    age int,
    address varchar(100)
)
5.项目开发。

2.编写通用接口

1.工具类

封装增删改的返回结果，统一结果，方便维护和使用，查询用此类
import lombok.Data;
@Data
public class User {
    private Long id;
    private String username;
    private Integer age;
    private String address;
}
import lombok.Data;
@Data
public class AjaxResult {
    private Boolean success = true;
    private String message = "操作成功";
    private Object data;
    // 1.构造器
    public AjaxResult(){}
    public AjaxResult(Boolean success, String message){
        this.success = success;
        this.message = message;
    }
    public AjaxResult(Boolean success, String message, Object data){
        this.success = success;
        this.message = message;
        this.data = data;
    }
    // 2.链式语法
    public static AjaxResult me(){
        return new AjaxResult();
    }
    public AjaxResult setSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    public AjaxResult setMessage(String message) {
        this.message = message;
        return this;
    }
    public AjaxResult setData(Object data) {
        this.data = data;
        return this;
    }
    // 3.简化调用
2.Mapper接口和sql。

public static AjaxResult ok(){
        return new AjaxResult();
    }
    public static AjaxResult ok(Object data){
        return new AjaxResult().setData(data);
    }
    public static AjaxResult fail(){
        return new AjaxResult().setSuccess(false);
    }
    public static AjaxResult fail(Object data){
        return new AjaxResult().setSuccess(false).setData(data);
    }
}
import cn.cd.domain.User;
import java.util.List;
public interface UserMapper {
    // 添加
    // @Insert("insert into t_user(name, age, address) values (#{name},#{age},#
{address})")
    void add(User user);
    // 更新
    // @Update("update t_user set name=#{name}, age=#{age}, address=#{address} 
where id=#{id}")
    void update(User user);
    // 删除
    // @Delete("delete from t_user where id=#{id}")
    void delete(Long id);
    // 查询单个数据
    // @Select("select * from t_user where id=#{id}")
    User findById(Long id);
    // 查询所有
    // @Select("select * from t_user")
    List<User> findAll();
}
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.cd.mapper.UserMapper">
    <!-- useGeneratedKeys="true" keyColumn="id" keyProperty="id"获取自增id -->
    <insert id="add" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into t_user (name, age, address)
        values (#{username}, #{age}, #{address})
    </insert>
    <!-- 动态sql实现，动态更新 -->
    <update id="update">
        update t_user
3.Servie接口和实现类。

<set>
            <if test="username != null">
                name = #{username},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
        </set>
            where id = #{id}
    </update>
    <delete id="delete">
        delete from t_user where id = #{id}
    </delete>
    <!-- resultType自动映射，实体类字段名与表列名一样，类型一致，否则映射为null -->
    <select id="findById" resultType="cn.cd.domain.User">
        select * from t_user where id = #{id}
    </select>
    <!-- resultMap="UserMap"手动映射 -->
    <select id="findAll" resultMap="UserMap">
        select * from t_user
    </select>
    <resultMap id="UserMap" type="User">
        <id property="id" column="id"/>
        <result property="username" column="name"/>
        <result property="age" column="age"/>
        <result property="address" column="address"/>
    </resultMap>
</mapper>
import cn.cd.domain.User;
import java.util.List;
public interface UserService {
    void add(User user);
    void update(User user);
    void delete(Long id);
    User getOne(Long id);
    List<User> getAll();
}
import cn.cd.domain.User;
import cn.cd.mapper.UserMapper;
import cn.cd.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
4.Controller接口。

此接口并非interface，对于前端和运维的人来说，后端写的Controller，可以被直接访问和调用，就称
之为接口
import java.util.List;
@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.getAll();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getOne(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id")Long id){
6.接口测试工具。

对于Mapper和Service测试可以使用main方法，单元测试，SpringBoot测试。

推荐使用SpringBoot测
试
对于Controller，需要发送请求，所以可以通过：PostMan、Apifox、IDEA插件、Knife4j
IDEA插件：
Knife4j配置类：
        try {
            userService.delete(id);
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user){
        try {
            if(user.getId() == null){
                userService.add(user);
            }else{
                userService.update(user);
            }
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
}
<!--添加Knife4j依赖-->
<dependency>
    <groupId>com.github.xiaoymin</groupId>
    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>
    <version>4.3.0</version>
</dependency>
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;
@Configuration
@Slf4j
@EnableSwagger2WebMvc
public class Knife4jConfig {
    // 访问地址：http://localhost:8080/doc.html
    /**
     * 【重要】【重要】【重要】 指定Controller包路径 类路径
     */
    private static final String BASE_PACKAGE = "改成你的controller所在包名";
    /**
     * 组名
     */
    private static final String GROUP_NAME = "sz";
    /**
     * 主机名
     */
    private static final String HOST = "http://localhost";
    /**
     * 标题
     */
    private static final String TITLE = "xxxx-在线API文档";
    /**
     * 简介
     */
    private static final String DESCRIPTION = "xxxxx-在线API文档";
    /**
     * 服务条款URL
     */
    private static final String TERMS_OF_SERVICE_URL = 
"http://www.apache.org/licenses/LICENSE-2.0";
    /**
     * 联系人
     */
    private static final String CONTACT_NAME = "Java教学研发部";
    /**
     * 联系网址
     */
    private static final String CONTACT_URL = "http://localhost:8080";
    /**
     * 联系邮箱
     */
    private static final String CONTACT_EMAIL = "tom@qq.cn";
    /**
     * 版本号
     */
7.集成优化。

7.1.全局异常处理

自定义业务异常：
全局异常处理：
    private static final String VERSION = "2.0";
    public Knife4jConfig() {
        log.debug("创建配置类对象：Knife4jConfiguration");
    }
    @Bean
    public Docket docket() {
        return new Docket(DocumentationType.SWAGGER_2)
                .host(HOST)
                .apiInfo(apiInfo())
                .groupName(GROUP_NAME)
                .select()
                .apis(RequestHandlerSelectors.basePackage(BASE_PACKAGE))
                .paths(PathSelectors.any())
                .build();
    }
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                .title(TITLE)
                .description(DESCRIPTION)
                .termsOfServiceUrl(TERMS_OF_SERVICE_URL)
                .contact(new Contact(CONTACT_NAME, CONTACT_URL, CONTACT_EMAIL))
                .version(VERSION)
                .build();
    }
}
public class BusinessException extends RuntimeException {
    // 保留原始异常堆栈
    public BusinessException(String message) {
        super(message); // 关键：设置父类message
    }
}
//对加了@RestController的类【接口类】的增强 - 全局异常处理
@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {
    //当前方法用来处理业务异常
    @ExceptionHandler(BusinessException.class)
    public AjaxResult handleBusinessException(BusinessException e){
        return AjaxResult.me()
Controller优化：
7.2.批量删除。

插件推荐：下载Mybatisx插件
7.3.事务处理

事务是控制在Service中，类上用查询的事务控制，写方法上用注解 @Transactional即可
                .setSuccess(false)
                .setMessage(e.getMessage());
    }
    //当前方法用来处理其他异常
    @ExceptionHandler(Exception.class)
    public AjaxResult handleException(Exception e){
        e.printStackTrace();
        //log.error("系统异常:", e); // 建议添加日志记录
        return AjaxResult.me()
                .setSuccess(false)
                .setMessage("系统繁忙，请稍后重试");
    }
}
@DeleteMapping("/{id}")
public AjaxResult delete(@PathVariable("id") Long id) {
    userService.delete(id);
    return AjaxResult.ok();
}
@PutMapping
public AjaxResult update(@RequestBody User user) {
    if (user.getId() == null) {
        userService.add(user);
    } else {
        userService.update(user);
    }
    return AjaxResult.ok();
}
@PatchMapping
public AjaxResult patchDelete(@RequestBody Long[] ids) {
    userService.patchDelete(ids);
    return AjaxResult.ok();
}
<delete id="patchDelete">
    delete from t_user where id in
    <foreach item="id" collection="array" separator="," open="(" close=")">
        #{id}
    </foreach>
</delete>
7.4.高级查询分页查询。

高级查询：多条件动态查询，使用Mybatis的动态sql实现
分页查询：将大量的数据按照规定的页一页一页显示
UserQuery：接收分页参数
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Transactional
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Transactional
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Transactional
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
    @Transactional
    @Override
    public void patchDelete(Long[] ids) {
        userMapper.patchDelete(ids);
    }
}
@Data
public class UserQuery {
    // 分页参数
    private Integer currentPage = 1;
    private Integer pageSize = 5;
    // 计算当前页的起始下标
PageList：封装分页结果
UserController：编写分页接口
UserServiceImpl：分页业务
UserMapper：sql语句
    public Integer getStart() {
        return (this.currentPage - 1) * this.pageSize;
    }
    // 高级查询参数
    private String username;
    private String address;
}
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PageList<T> {
    private List<T> list = new ArrayList<>();
    private Integer totals = 0;
}
@PostMapping
public PageList<User> queryPage(@RequestBody UserQuery userQuery) {
    return userService.queryPage(userQuery);
}
@Override
public PageList<User> queryPage(UserQuery userQuery) {
    Integer totals = userMapper.queryCount(userQuery);
    if(totals == null || totals == 0){
        return new PageList<>();
    }
    List<User> list =userMapper.queryData(userQuery);
    return new PageList<>(list,totals);
}
// 查询总条数
Integer queryCount(UserQuery userQuery);
// 查询当前页分页数据
List<User> queryData(UserQuery userQuery);
<select id="queryData" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
    limit #{start},#{pageSize}
</select>
<select id="queryCount" resultType="java.lang.Integer">
    select count(1) from t_user
    <include refid="UserQuery"></include>
8.分页插件PageHelper使用。

导入依赖：
业务中：
Mapper文件中：
9.MybatisPlus的使用

</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<!--pagehelper分页插件-->
<dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper-spring-boot-starter</artifactId>
    <version>1.4.6</version>
</dependency>
@Override
public PageInfo<User> queryPage(UserQuery userQuery) {
    //开启分页
    PageHelper.startPage(userQuery.getCurrentPage(),userQuery.getPageSize());
    List<User> list = userMapper.queryPage(userQuery);
    return new PageInfo<>(list);
}
<select id="queryPage" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<dependency>
    <groupId>com.baomidou</groupId>
    <artifactId>mybatis-plus-boot-starter</artifactId>
    <version>3.5.2</version>
</dependency>
# mybatis配置 - 只要导入了mybatisPlus的包，这里就是mybatis-plus不能是mybatis
mybatis-plus:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mappers/*Mapper.xml
@Data
@TableName("t_user")
public class User {
    @TableId(value = "id", type = IdType.AUTO) // 主键映射
    private Long id;
    @TableField(value = "username")
    private String username;
    @TableField(value = "age")
    private Integer age;
    @TableField(value = "address")
    private String address;
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.list();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getById(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id") Long id) {
        userService.removeById(id);
        return AjaxResult.ok();
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user) {
        if (user.getId() == null) {
            userService.save(user);
        } else {
            userService.update(user,null);
        }
        return AjaxResult.ok();。

}
    @PatchMapping
    public AjaxResult patchDelete(@RequestBody List<Long> ids) {
        userService.removeByIds(ids);
        return AjaxResult.ok();
    }
}
public interface UserService extends IService<User> {
}
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements 
UserService {
}
public interface UserMapper extends BaseMapper<User> {
}

请生成课时教学大纲：

2025-06-23 11:32:09,248 - INFO
Loading faiss with AVX2 support.
2025-06-23 11:32:09,263 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 11:32:09,266 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:32:14,325 - INFO
Client: Address(host='127.0.0.1', port=34474)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 11:33:05,633 - INFO
Client: Address(host='127.0.0.1', port=57432)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1", \r\n    "lessonNum": "1",\r\n    "max_words": 1000\r\n}'

2025-06-23 11:33:05,640 - INFO
Client: 
Url: 
Data:
Generation Prompt:
你是一位经验丰富的教师，请根据以下课时内容，生成一份详细、实用的课时教学大纲。

重要要求：
1. 大纲必须包含具体、详细的内容，不能只是标题或框架
2. 每个部分都要有实质性的内容，包括具体的教学目标、教学内容、教学方法等
3. 字数控制在1000字以内，但要确保内容完整、实用
4. 突出教学重点和难点，并提供具体的教学建议
5. 适合实际课堂教学使用，具有可操作性
6. 语言要清晰、准确，符合教学规范

课时内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- mybatis与springBoot的整合包 -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.3.1</version>
    </dependency>
    <!-- mysql驱动包 -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
3.配置信息。

3.1.自动配置

3.2.手动配置

4.数据准备

数据库、表、实体类
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>
</dependencies>
// 启动类,申明当前类是SpringBoot项目的启动类，默认端口是8080
@SpringBootApplication
// 扫描mapper接口所在的包，生成代理对象，保存到IOC容器中，后续给Service注入使用
@MapperScan("cn.cd.mapper")
public class App {
    public static void main(String[] args) {
        //使用启动类App去启动一个Spring应用
        SpringApplication.run(App.class, args);
    }
}
server:
  port: 8080 # 端口浩
  servlet:
    context-path: / # 上下文路径
# 连接数据库的四大金刚
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/edu?useUnicode=true&characterEncoding=utf-
8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
# mybatis配置
mybatis:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mapper/*Mapper.xml
create table t_user(
    id bigint primary key auto_increment,
    name varchar(50),
    age int,
    address varchar(100)
)
5.项目开发。

2.编写通用接口

1.工具类

封装增删改的返回结果，统一结果，方便维护和使用，查询用此类
import lombok.Data;
@Data
public class User {
    private Long id;
    private String username;
    private Integer age;
    private String address;
}
import lombok.Data;
@Data
public class AjaxResult {
    private Boolean success = true;
    private String message = "操作成功";
    private Object data;
    // 1.构造器
    public AjaxResult(){}
    public AjaxResult(Boolean success, String message){
        this.success = success;
        this.message = message;
    }
    public AjaxResult(Boolean success, String message, Object data){
        this.success = success;
        this.message = message;
        this.data = data;
    }
    // 2.链式语法
    public static AjaxResult me(){
        return new AjaxResult();
    }
    public AjaxResult setSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    public AjaxResult setMessage(String message) {
        this.message = message;
        return this;
    }
    public AjaxResult setData(Object data) {
        this.data = data;
        return this;
    }
    // 3.简化调用
2.Mapper接口和sql。

public static AjaxResult ok(){
        return new AjaxResult();
    }
    public static AjaxResult ok(Object data){
        return new AjaxResult().setData(data);
    }
    public static AjaxResult fail(){
        return new AjaxResult().setSuccess(false);
    }
    public static AjaxResult fail(Object data){
        return new AjaxResult().setSuccess(false).setData(data);
    }
}
import cn.cd.domain.User;
import java.util.List;
public interface UserMapper {
    // 添加
    // @Insert("insert into t_user(name, age, address) values (#{name},#{age},#
{address})")
    void add(User user);
    // 更新
    // @Update("update t_user set name=#{name}, age=#{age}, address=#{address} 
where id=#{id}")
    void update(User user);
    // 删除
    // @Delete("delete from t_user where id=#{id}")
    void delete(Long id);
    // 查询单个数据
    // @Select("select * from t_user where id=#{id}")
    User findById(Long id);
    // 查询所有
    // @Select("select * from t_user")
    List<User> findAll();
}
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.cd.mapper.UserMapper">
    <!-- useGeneratedKeys="true" keyColumn="id" keyProperty="id"获取自增id -->
    <insert id="add" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into t_user (name, age, address)
        values (#{username}, #{age}, #{address})
    </insert>
    <!-- 动态sql实现，动态更新 -->
    <update id="update">
        update t_user
3.Servie接口和实现类。

<set>
            <if test="username != null">
                name = #{username},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
        </set>
            where id = #{id}
    </update>
    <delete id="delete">
        delete from t_user where id = #{id}
    </delete>
    <!-- resultType自动映射，实体类字段名与表列名一样，类型一致，否则映射为null -->
    <select id="findById" resultType="cn.cd.domain.User">
        select * from t_user where id = #{id}
    </select>
    <!-- resultMap="UserMap"手动映射 -->
    <select id="findAll" resultMap="UserMap">
        select * from t_user
    </select>
    <resultMap id="UserMap" type="User">
        <id property="id" column="id"/>
        <result property="username" column="name"/>
        <result property="age" column="age"/>
        <result property="address" column="address"/>
    </resultMap>
</mapper>
import cn.cd.domain.User;
import java.util.List;
public interface UserService {
    void add(User user);
    void update(User user);
    void delete(Long id);
    User getOne(Long id);
    List<User> getAll();
}
import cn.cd.domain.User;
import cn.cd.mapper.UserMapper;
import cn.cd.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
4.Controller接口。

此接口并非interface，对于前端和运维的人来说，后端写的Controller，可以被直接访问和调用，就称
之为接口
import java.util.List;
@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.getAll();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getOne(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id")Long id){
6.接口测试工具。

对于Mapper和Service测试可以使用main方法，单元测试，SpringBoot测试。

推荐使用SpringBoot测
试
对于Controller，需要发送请求，所以可以通过：PostMan、Apifox、IDEA插件、Knife4j
IDEA插件：
Knife4j配置类：
        try {
            userService.delete(id);
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user){
        try {
            if(user.getId() == null){
                userService.add(user);
            }else{
                userService.update(user);
            }
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
}
<!--添加Knife4j依赖-->
<dependency>
    <groupId>com.github.xiaoymin</groupId>
    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>
    <version>4.3.0</version>
</dependency>
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;
@Configuration
@Slf4j
@EnableSwagger2WebMvc
public class Knife4jConfig {
    // 访问地址：http://localhost:8080/doc.html
    /**
     * 【重要】【重要】【重要】 指定Controller包路径 类路径
     */
    private static final String BASE_PACKAGE = "改成你的controller所在包名";
    /**
     * 组名
     */
    private static final String GROUP_NAME = "sz";
    /**
     * 主机名
     */
    private static final String HOST = "http://localhost";
    /**
     * 标题
     */
    private static final String TITLE = "xxxx-在线API文档";
    /**
     * 简介
     */
    private static final String DESCRIPTION = "xxxxx-在线API文档";
    /**
     * 服务条款URL
     */
    private static final String TERMS_OF_SERVICE_URL = 
"http://www.apache.org/licenses/LICENSE-2.0";
    /**
     * 联系人
     */
    private static final String CONTACT_NAME = "Java教学研发部";
    /**
     * 联系网址
     */
    private static final String CONTACT_URL = "http://localhost:8080";
    /**
     * 联系邮箱
     */
    private static final String CONTACT_EMAIL = "tom@qq.cn";
    /**
     * 版本号
     */
7.集成优化。

7.1.全局异常处理

自定义业务异常：
全局异常处理：
    private static final String VERSION = "2.0";
    public Knife4jConfig() {
        log.debug("创建配置类对象：Knife4jConfiguration");
    }
    @Bean
    public Docket docket() {
        return new Docket(DocumentationType.SWAGGER_2)
                .host(HOST)
                .apiInfo(apiInfo())
                .groupName(GROUP_NAME)
                .select()
                .apis(RequestHandlerSelectors.basePackage(BASE_PACKAGE))
                .paths(PathSelectors.any())
                .build();
    }
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                .title(TITLE)
                .description(DESCRIPTION)
                .termsOfServiceUrl(TERMS_OF_SERVICE_URL)
                .contact(new Contact(CONTACT_NAME, CONTACT_URL, CONTACT_EMAIL))
                .version(VERSION)
                .build();
    }
}
public class BusinessException extends RuntimeException {
    // 保留原始异常堆栈
    public BusinessException(String message) {
        super(message); // 关键：设置父类message
    }
}
//对加了@RestController的类【接口类】的增强 - 全局异常处理
@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {
    //当前方法用来处理业务异常
    @ExceptionHandler(BusinessException.class)
    public AjaxResult handleBusinessException(BusinessException e){
        return AjaxResult.me()
Controller优化：
7.2.批量删除。

插件推荐：下载Mybatisx插件
7.3.事务处理

事务是控制在Service中，类上用查询的事务控制，写方法上用注解 @Transactional即可
                .setSuccess(false)
                .setMessage(e.getMessage());
    }
    //当前方法用来处理其他异常
    @ExceptionHandler(Exception.class)
    public AjaxResult handleException(Exception e){
        e.printStackTrace();
        //log.error("系统异常:", e); // 建议添加日志记录
        return AjaxResult.me()
                .setSuccess(false)
                .setMessage("系统繁忙，请稍后重试");
    }
}
@DeleteMapping("/{id}")
public AjaxResult delete(@PathVariable("id") Long id) {
    userService.delete(id);
    return AjaxResult.ok();
}
@PutMapping
public AjaxResult update(@RequestBody User user) {
    if (user.getId() == null) {
        userService.add(user);
    } else {
        userService.update(user);
    }
    return AjaxResult.ok();
}
@PatchMapping
public AjaxResult patchDelete(@RequestBody Long[] ids) {
    userService.patchDelete(ids);
    return AjaxResult.ok();
}
<delete id="patchDelete">
    delete from t_user where id in
    <foreach item="id" collection="array" separator="," open="(" close=")">
        #{id}
    </foreach>
</delete>
7.4.高级查询分页查询。

高级查询：多条件动态查询，使用Mybatis的动态sql实现
分页查询：将大量的数据按照规定的页一页一页显示
UserQuery：接收分页参数
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Transactional
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Transactional
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Transactional
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
    @Transactional
    @Override
    public void patchDelete(Long[] ids) {
        userMapper.patchDelete(ids);
    }
}
@Data
public class UserQuery {
    // 分页参数
    private Integer currentPage = 1;
    private Integer pageSize = 5;
    // 计算当前页的起始下标
PageList：封装分页结果
UserController：编写分页接口
UserServiceImpl：分页业务
UserMapper：sql语句
    public Integer getStart() {
        return (this.currentPage - 1) * this.pageSize;
    }
    // 高级查询参数
    private String username;
    private String address;
}
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PageList<T> {
    private List<T> list = new ArrayList<>();
    private Integer totals = 0;
}
@PostMapping
public PageList<User> queryPage(@RequestBody UserQuery userQuery) {
    return userService.queryPage(userQuery);
}
@Override
public PageList<User> queryPage(UserQuery userQuery) {
    Integer totals = userMapper.queryCount(userQuery);
    if(totals == null || totals == 0){
        return new PageList<>();
    }
    List<User> list =userMapper.queryData(userQuery);
    return new PageList<>(list,totals);
}
// 查询总条数
Integer queryCount(UserQuery userQuery);
// 查询当前页分页数据
List<User> queryData(UserQuery userQuery);
<select id="queryData" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
    limit #{start},#{pageSize}
</select>
<select id="queryCount" resultType="java.lang.Integer">
    select count(1) from t_user
    <include refid="UserQuery"></include>
8.分页插件PageHelper使用。

导入依赖：
业务中：
Mapper文件中：
9.MybatisPlus的使用

</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<!--pagehelper分页插件-->
<dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper-spring-boot-starter</artifactId>
    <version>1.4.6</version>
</dependency>
@Override
public PageInfo<User> queryPage(UserQuery userQuery) {
    //开启分页
    PageHelper.startPage(userQuery.getCurrentPage(),userQuery.getPageSize());
    List<User> list = userMapper.queryPage(userQuery);
    return new PageInfo<>(list);
}
<select id="queryPage" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<dependency>
    <groupId>com.baomidou</groupId>
    <artifactId>mybatis-plus-boot-starter</artifactId>
    <version>3.5.2</version>
</dependency>
# mybatis配置 - 只要导入了mybatisPlus的包，这里就是mybatis-plus不能是mybatis
mybatis-plus:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mappers/*Mapper.xml
@Data
@TableName("t_user")
public class User {
    @TableId(value = "id", type = IdType.AUTO) // 主键映射
    private Long id;
    @TableField(value = "username")
    private String username;
    @TableField(value = "age")
    private Integer age;
    @TableField(value = "address")
    private String address;
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.list();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getById(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id") Long id) {
        userService.removeById(id);
        return AjaxResult.ok();
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user) {
        if (user.getId() == null) {
            userService.save(user);
        } else {
            userService.update(user,null);
        }
        return AjaxResult.ok();。

}
    @PatchMapping
    public AjaxResult patchDelete(@RequestBody List<Long> ids) {
        userService.removeByIds(ids);
        return AjaxResult.ok();
    }
}
public interface UserService extends IService<User> {
}
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements 
UserService {
}
public interface UserMapper extends BaseMapper<User> {
}

请生成一份完整的课时教学大纲，确保每个部分都有具体内容：

请按照以下格式生成详细的教学大纲：

1. 学习目标：
   - 明确列出本节课的学习目标
   - 说明学生应该掌握的知识和技能

2. 教学内容：
   - 详细列出本节课的教学内容
   - 包括主要概念、原理和方法

3. 教学重点：
   - 突出本节课的重点内容
   - 说明为什么这些内容重要

4. 教学难点：
   - 识别本节课的难点
   - 提供解决难点的建议

5. 教学方法：
   - 建议合适的教学方法
   - 包括讲解、演示、练习等

6. 教学步骤：
   - 详细的教学流程
   - 时间分配建议

7. 课堂练习：
   - 设计相关的练习题目
   - 帮助学生巩固知识

8. 总结与反思：
   - 本节课的要点总结
   - 教学反思和改进建议

请确保每个部分都有具体、详细的内容，不要只是列出标题。

2025-06-23 11:33:10,823 - INFO
Client: 
Url: 
Data:
Generation Prompt:
你是一位经验丰富的教师，请根据以下课时内容，生成一份详细、实用的课时教学大纲。

重要要求：
1. 大纲必须包含具体、详细的内容，不能只是标题或框架
2. 每个部分都要有实质性的内容，包括具体的教学目标、教学内容、教学方法等
3. 字数控制在1000字以内，但要确保内容完整、实用
4. 突出教学重点和难点，并提供具体的教学建议
5. 适合实际课堂教学使用，具有可操作性
6. 语言要清晰、准确，符合教学规范

课时内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- mybatis与springBoot的整合包 -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.3.1</version>
    </dependency>
    <!-- mysql驱动包 -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
3.配置信息。

3.1.自动配置

3.2.手动配置

4.数据准备

数据库、表、实体类
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>
</dependencies>
// 启动类,申明当前类是SpringBoot项目的启动类，默认端口是8080
@SpringBootApplication
// 扫描mapper接口所在的包，生成代理对象，保存到IOC容器中，后续给Service注入使用
@MapperScan("cn.cd.mapper")
public class App {
    public static void main(String[] args) {
        //使用启动类App去启动一个Spring应用
        SpringApplication.run(App.class, args);
    }
}
server:
  port: 8080 # 端口浩
  servlet:
    context-path: / # 上下文路径
# 连接数据库的四大金刚
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/edu?useUnicode=true&characterEncoding=utf-
8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
# mybatis配置
mybatis:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mapper/*Mapper.xml
create table t_user(
    id bigint primary key auto_increment,
    name varchar(50),
    age int,
    address varchar(100)
)
5.项目开发。

2.编写通用接口

1.工具类

封装增删改的返回结果，统一结果，方便维护和使用，查询用此类
import lombok.Data;
@Data
public class User {
    private Long id;
    private String username;
    private Integer age;
    private String address;
}
import lombok.Data;
@Data
public class AjaxResult {
    private Boolean success = true;
    private String message = "操作成功";
    private Object data;
    // 1.构造器
    public AjaxResult(){}
    public AjaxResult(Boolean success, String message){
        this.success = success;
        this.message = message;
    }
    public AjaxResult(Boolean success, String message, Object data){
        this.success = success;
        this.message = message;
        this.data = data;
    }
    // 2.链式语法
    public static AjaxResult me(){
        return new AjaxResult();
    }
    public AjaxResult setSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    public AjaxResult setMessage(String message) {
        this.message = message;
        return this;
    }
    public AjaxResult setData(Object data) {
        this.data = data;
        return this;
    }
    // 3.简化调用
2.Mapper接口和sql。

public static AjaxResult ok(){
        return new AjaxResult();
    }
    public static AjaxResult ok(Object data){
        return new AjaxResult().setData(data);
    }
    public static AjaxResult fail(){
        return new AjaxResult().setSuccess(false);
    }
    public static AjaxResult fail(Object data){
        return new AjaxResult().setSuccess(false).setData(data);
    }
}
import cn.cd.domain.User;
import java.util.List;
public interface UserMapper {
    // 添加
    // @Insert("insert into t_user(name, age, address) values (#{name},#{age},#
{address})")
    void add(User user);
    // 更新
    // @Update("update t_user set name=#{name}, age=#{age}, address=#{address} 
where id=#{id}")
    void update(User user);
    // 删除
    // @Delete("delete from t_user where id=#{id}")
    void delete(Long id);
    // 查询单个数据
    // @Select("select * from t_user where id=#{id}")
    User findById(Long id);
    // 查询所有
    // @Select("select * from t_user")
    List<User> findAll();
}
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.cd.mapper.UserMapper">
    <!-- useGeneratedKeys="true" keyColumn="id" keyProperty="id"获取自增id -->
    <insert id="add" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into t_user (name, age, address)
        values (#{username}, #{age}, #{address})
    </insert>
    <!-- 动态sql实现，动态更新 -->
    <update id="update">
        update t_user
3.Servie接口和实现类。

<set>
            <if test="username != null">
                name = #{username},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
        </set>
            where id = #{id}
    </update>
    <delete id="delete">
        delete from t_user where id = #{id}
    </delete>
    <!-- resultType自动映射，实体类字段名与表列名一样，类型一致，否则映射为null -->
    <select id="findById" resultType="cn.cd.domain.User">
        select * from t_user where id = #{id}
    </select>
    <!-- resultMap="UserMap"手动映射 -->
    <select id="findAll" resultMap="UserMap">
        select * from t_user
    </select>
    <resultMap id="UserMap" type="User">
        <id property="id" column="id"/>
        <result property="username" column="name"/>
        <result property="age" column="age"/>
        <result property="address" column="address"/>
    </resultMap>
</mapper>
import cn.cd.domain.User;
import java.util.List;
public interface UserService {
    void add(User user);
    void update(User user);
    void delete(Long id);
    User getOne(Long id);
    List<User> getAll();
}
import cn.cd.domain.User;
import cn.cd.mapper.UserMapper;
import cn.cd.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
4.Controller接口。

此接口并非interface，对于前端和运维的人来说，后端写的Controller，可以被直接访问和调用，就称
之为接口
import java.util.List;
@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.getAll();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getOne(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id")Long id){
6.接口测试工具。

对于Mapper和Service测试可以使用main方法，单元测试，SpringBoot测试。

推荐使用SpringBoot测
试
对于Controller，需要发送请求，所以可以通过：PostMan、Apifox、IDEA插件、Knife4j
IDEA插件：
Knife4j配置类：
        try {
            userService.delete(id);
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user){
        try {
            if(user.getId() == null){
                userService.add(user);
            }else{
                userService.update(user);
            }
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
}
<!--添加Knife4j依赖-->
<dependency>
    <groupId>com.github.xiaoymin</groupId>
    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>
    <version>4.3.0</version>
</dependency>
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;
@Configuration
@Slf4j
@EnableSwagger2WebMvc
public class Knife4jConfig {
    // 访问地址：http://localhost:8080/doc.html
    /**
     * 【重要】【重要】【重要】 指定Controller包路径 类路径
     */
    private static final String BASE_PACKAGE = "改成你的controller所在包名";
    /**
     * 组名
     */
    private static final String GROUP_NAME = "sz";
    /**
     * 主机名
     */
    private static final String HOST = "http://localhost";
    /**
     * 标题
     */
    private static final String TITLE = "xxxx-在线API文档";
    /**
     * 简介
     */
    private static final String DESCRIPTION = "xxxxx-在线API文档";
    /**
     * 服务条款URL
     */
    private static final String TERMS_OF_SERVICE_URL = 
"http://www.apache.org/licenses/LICENSE-2.0";
    /**
     * 联系人
     */
    private static final String CONTACT_NAME = "Java教学研发部";
    /**
     * 联系网址
     */
    private static final String CONTACT_URL = "http://localhost:8080";
    /**
     * 联系邮箱
     */
    private static final String CONTACT_EMAIL = "tom@qq.cn";
    /**
     * 版本号
     */
7.集成优化。

7.1.全局异常处理

自定义业务异常：
全局异常处理：
    private static final String VERSION = "2.0";
    public Knife4jConfig() {
        log.debug("创建配置类对象：Knife4jConfiguration");
    }
    @Bean
    public Docket docket() {
        return new Docket(DocumentationType.SWAGGER_2)
                .host(HOST)
                .apiInfo(apiInfo())
                .groupName(GROUP_NAME)
                .select()
                .apis(RequestHandlerSelectors.basePackage(BASE_PACKAGE))
                .paths(PathSelectors.any())
                .build();
    }
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                .title(TITLE)
                .description(DESCRIPTION)
                .termsOfServiceUrl(TERMS_OF_SERVICE_URL)
                .contact(new Contact(CONTACT_NAME, CONTACT_URL, CONTACT_EMAIL))
                .version(VERSION)
                .build();
    }
}
public class BusinessException extends RuntimeException {
    // 保留原始异常堆栈
    public BusinessException(String message) {
        super(message); // 关键：设置父类message
    }
}
//对加了@RestController的类【接口类】的增强 - 全局异常处理
@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {
    //当前方法用来处理业务异常
    @ExceptionHandler(BusinessException.class)
    public AjaxResult handleBusinessException(BusinessException e){
        return AjaxResult.me()
Controller优化：
7.2.批量删除。

插件推荐：下载Mybatisx插件
7.3.事务处理

事务是控制在Service中，类上用查询的事务控制，写方法上用注解 @Transactional即可
                .setSuccess(false)
                .setMessage(e.getMessage());
    }
    //当前方法用来处理其他异常
    @ExceptionHandler(Exception.class)
    public AjaxResult handleException(Exception e){
        e.printStackTrace();
        //log.error("系统异常:", e); // 建议添加日志记录
        return AjaxResult.me()
                .setSuccess(false)
                .setMessage("系统繁忙，请稍后重试");
    }
}
@DeleteMapping("/{id}")
public AjaxResult delete(@PathVariable("id") Long id) {
    userService.delete(id);
    return AjaxResult.ok();
}
@PutMapping
public AjaxResult update(@RequestBody User user) {
    if (user.getId() == null) {
        userService.add(user);
    } else {
        userService.update(user);
    }
    return AjaxResult.ok();
}
@PatchMapping
public AjaxResult patchDelete(@RequestBody Long[] ids) {
    userService.patchDelete(ids);
    return AjaxResult.ok();
}
<delete id="patchDelete">
    delete from t_user where id in
    <foreach item="id" collection="array" separator="," open="(" close=")">
        #{id}
    </foreach>
</delete>
7.4.高级查询分页查询。

高级查询：多条件动态查询，使用Mybatis的动态sql实现
分页查询：将大量的数据按照规定的页一页一页显示
UserQuery：接收分页参数
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Transactional
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Transactional
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Transactional
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
    @Transactional
    @Override
    public void patchDelete(Long[] ids) {
        userMapper.patchDelete(ids);
    }
}
@Data
public class UserQuery {
    // 分页参数
    private Integer currentPage = 1;
    private Integer pageSize = 5;
    // 计算当前页的起始下标
PageList：封装分页结果
UserController：编写分页接口
UserServiceImpl：分页业务
UserMapper：sql语句
    public Integer getStart() {
        return (this.currentPage - 1) * this.pageSize;
    }
    // 高级查询参数
    private String username;
    private String address;
}
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PageList<T> {
    private List<T> list = new ArrayList<>();
    private Integer totals = 0;
}
@PostMapping
public PageList<User> queryPage(@RequestBody UserQuery userQuery) {
    return userService.queryPage(userQuery);
}
@Override
public PageList<User> queryPage(UserQuery userQuery) {
    Integer totals = userMapper.queryCount(userQuery);
    if(totals == null || totals == 0){
        return new PageList<>();
    }
    List<User> list =userMapper.queryData(userQuery);
    return new PageList<>(list,totals);
}
// 查询总条数
Integer queryCount(UserQuery userQuery);
// 查询当前页分页数据
List<User> queryData(UserQuery userQuery);
<select id="queryData" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
    limit #{start},#{pageSize}
</select>
<select id="queryCount" resultType="java.lang.Integer">
    select count(1) from t_user
    <include refid="UserQuery"></include>
8.分页插件PageHelper使用。

导入依赖：
业务中：
Mapper文件中：
9.MybatisPlus的使用

</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<!--pagehelper分页插件-->
<dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper-spring-boot-starter</artifactId>
    <version>1.4.6</version>
</dependency>
@Override
public PageInfo<User> queryPage(UserQuery userQuery) {
    //开启分页
    PageHelper.startPage(userQuery.getCurrentPage(),userQuery.getPageSize());
    List<User> list = userMapper.queryPage(userQuery);
    return new PageInfo<>(list);
}
<select id="queryPage" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<dependency>
    <groupId>com.baomidou</groupId>
    <artifactId>mybatis-plus-boot-starter</artifactId>
    <version>3.5.2</version>
</dependency>
# mybatis配置 - 只要导入了mybatisPlus的包，这里就是mybatis-plus不能是mybatis
mybatis-plus:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mappers/*Mapper.xml
@Data
@TableName("t_user")
public class User {
    @TableId(value = "id", type = IdType.AUTO) // 主键映射
    private Long id;
    @TableField(value = "username")
    private String username;
    @TableField(value = "age")
    private Integer age;
    @TableField(value = "address")
    private String address;
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.list();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getById(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id") Long id) {
        userService.removeById(id);
        return AjaxResult.ok();
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user) {
        if (user.getId() == null) {
            userService.save(user);
        } else {
            userService.update(user,null);
        }
        return AjaxResult.ok();。

}
    @PatchMapping
    public AjaxResult patchDelete(@RequestBody List<Long> ids) {
        userService.removeByIds(ids);
        return AjaxResult.ok();
    }
}
public interface UserService extends IService<User> {
}
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements 
UserService {
}
public interface UserMapper extends BaseMapper<User> {
}

请生成一份完整的课时教学大纲，确保每个部分都有具体内容：

请按照以下格式生成详细的教学大纲：

1. 学习目标：
   - 明确列出本节课的学习目标
   - 说明学生应该掌握的知识和技能

2. 教学内容：
   - 详细列出本节课的教学内容
   - 包括主要概念、原理和方法

3. 教学重点：
   - 突出本节课的重点内容
   - 说明为什么这些内容重要

4. 教学难点：
   - 识别本节课的难点
   - 提供解决难点的建议

5. 教学方法：
   - 建议合适的教学方法
   - 包括讲解、演示、练习等

6. 教学步骤：
   - 详细的教学流程
   - 时间分配建议

7. 课堂练习：
   - 设计相关的练习题目
   - 帮助学生巩固知识

8. 总结与反思：
   - 本节课的要点总结
   - 教学反思和改进建议

请确保每个部分都有具体、详细的内容，不要只是列出标题。

2025-06-23 11:36:31,456 - INFO
Loading faiss with AVX2 support.
2025-06-23 11:36:31,471 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 11:36:31,474 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:36:36,535 - INFO
Client: Address(host='127.0.0.1', port=44176)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 11:37:15,714 - INFO
Client: Address(host='127.0.0.1', port=45124)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "test-teacher-2",\r\n    "courseID": "1", \r\n    "lessonNum": "1",\r\n    "max_words": 1000\r\n}'

2025-06-23 11:37:15,719 - INFO
Client: 
Url: 
Data:
Generation Prompt:
你是一位经验丰富的教师，请根据以下课时内容，生成一份详细、实用的课时教学大纲。

重要要求：
1. 大纲必须包含具体、详细的内容，不能只是标题或框架
2. 每个部分都要有实质性的内容，包括具体的教学目标、教学内容、教学方法等
3. 字数控制在1000字以内，但要确保内容完整、实用
4. 突出教学重点和难点，并提供具体的教学建议
5. 适合实际课堂教学使用，具有可操作性
6. 语言要清晰、准确，符合教学规范

课时内容：
实训学生提交材料清单

每个项目小组提交一份《项目立项申请书》（文件名格式：项目立项申请书-XX小组）
每个项目小组提交一份《项目开发计划表》（文件名格式：项目开发计划表-XX小组）
每个项目小组提交一份《项目设计报告》（文件名格式：项目设计报告-XX小组）
每个项目小组提交一份《实习报告》（文件名格式：实习报告-XX小组）
实习报告中应包括需求分析、概要设计、详细设计、测试结果、附录等。 
设计报告中应首先包括设计题目、班级、姓名、学号、完成日期。 
概要设计中应包括设计思想、实现方法、系统中主要模块及各模块间的关系的描述。 
每个项目小组提交一份《项目源代码》（文件名格式：源代码-XX小组）
每个项目小组提交一份《项目答辩PPT》（文件名格式：项目答辩PPT-XX小组）
每个项目小组提交一份《项目演示视频》（文件名格式：项目演示视频-XX小组）
每人每天提交《工作日报》（文件名格式：工作日志-XXX）
每人提交一份《个人实习总结》（文件名格式：个人实习总结-XXX）
字数要求1500~2000字。
内容包含学习内容和过程，取得的成果、收获和体会，可附带实习过程展示、照片等。

注：
1-7项小组提交
8-9项个人提交

请生成一份完整的课时教学大纲，确保每个部分都有具体内容：

请按照以下格式生成详细的教学大纲：

1. 学习目标：
   - 明确列出本节课的学习目标
   - 说明学生应该掌握的知识和技能

2. 教学内容：
   - 详细列出本节课的教学内容
   - 包括主要概念、原理和方法

3. 教学重点：
   - 突出本节课的重点内容
   - 说明为什么这些内容重要

4. 教学难点：
   - 识别本节课的难点
   - 提供解决难点的建议

5. 教学方法：
   - 建议合适的教学方法
   - 包括讲解、演示、练习等

6. 教学步骤：
   - 详细的教学流程
   - 时间分配建议

7. 课堂练习：
   - 设计相关的练习题目
   - 帮助学生巩固知识

8. 总结与反思：
   - 本节课的要点总结
   - 教学反思和改进建议

请确保每个部分都有具体、详细的内容，不要只是列出标题。

2025-06-23 11:45:39,239 - INFO
Loading faiss with AVX2 support.
2025-06-23 11:45:39,254 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 11:45:39,257 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:45:44,311 - INFO
Client: Address(host='127.0.0.1', port=38748)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 11:47:34,578 - INFO
Client: Address(host='127.0.0.1', port=37276)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "test-teacher-2",\r\n    "courseID": "1", \r\n    "lessonNum": "1",\r\n    "max_words": 1000\r\n}'

2025-06-23 11:47:34,582 - INFO
Client: 
Url: 
Data:
Generation Prompt:
请根据以下内容生成一份教学大纲，字数控制在1000字以内：

大纲应包含：
1. 学习目标
2. 教学内容
3. 教学重点
4. 教学难点
5. 教学方法
6. 教学步骤
7. 课堂练习
8. 总结

内容：
实训学生提交材料清单

每个项目小组提交一份《项目立项申请书》（文件名格式：项目立项申请书-XX小组）
每个项目小组提交一份《项目开发计划表》（文件名格式：项目开发计划表-XX小组）
每个项目小组提交一份《项目设计报告》（文件名格式：项目设计报告-XX小组）
每个项目小组提交一份《实习报告》（文件名格式：实习报告-XX小组）
实习报告中应包括需求分析、概要设计、详细设计、测试结果、附录等。 
设计报告中应首先包括设计题目、班级、姓名、学号、完成日期。 
概要设计中应包括设计思想、实现方法、系统中主要模块及各模块间的关系的描述。 
每个项目小组提交一份《项目源代码》（文件名格式：源代码-XX小组）
每个项目小组提交一份《项目答辩PPT》（文件名格式：项目答辩PPT-XX小组）
每个项目小组提交一份《项目演示视频》（文件名格式：项目演示视频-XX小组）
每人每天提交《工作日报》（文件名格式：工作日志-XXX）
每人提交一份《个人实习总结》（文件名格式：个人实习总结-XXX）
字数要求1500~2000字。
内容包含学习内容和过程，取得的成果、收获和体会，可附带实习过程展示、照片等。

注：
1-7项小组提交
8-9项个人提交

教学大纲：

2025-06-23 11:50:00,370 - INFO
Client: Address(host='127.0.0.1', port=40940)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1", \r\n    "lessonNum": "1",\r\n    "max_words": 1000\r\n}'

2025-06-23 11:50:00,379 - INFO
Client: 
Url: 
Data:
Generation Prompt:
请根据以下内容生成一份教学大纲，字数控制在1000字以内：

大纲应包含：
1. 学习目标
2. 教学内容
3. 教学重点
4. 教学难点
5. 教学方法
6. 教学步骤
7. 课堂练习
8. 总结

内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- mybatis与springBoot的整合包 -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.3.1</version>
    </dependency>
    <!-- mysql驱动包 -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
3.配置信息。

3.1.自动配置

3.2.手动配置

4.数据准备

数据库、表、实体类
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>
</dependencies>
// 启动类,申明当前类是SpringBoot项目的启动类，默认端口是8080
@SpringBootApplication
// 扫描mapper接口所在的包，生成代理对象，保存到IOC容器中，后续给Service注入使用
@MapperScan("cn.cd.mapper")
public class App {
    public static void main(String[] args) {
        //使用启动类App去启动一个Spring应用
        SpringApplication.run(App.class, args);
    }
}
server:
  port: 8080 # 端口浩
  servlet:
    context-path: / # 上下文路径
# 连接数据库的四大金刚
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/edu?useUnicode=true&characterEncoding=utf-
8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
# mybatis配置
mybatis:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mapper/*Mapper.xml
create table t_user(
    id bigint primary key auto_increment,
    name varchar(50),
    age int,
    address varchar(100)
)
5.项目开发。

2.编写通用接口

1.工具类

封装增删改的返回结果，统一结果，方便维护和使用，查询用此类
import lombok.Data;
@Data
public class User {
    private Long id;
    private String username;
    private Integer age;
    private String address;
}
import lombok.Data;
@Data
public class AjaxResult {
    private Boolean success = true;
    private String message = "操作成功";
    private Object data;
    // 1.构造器
    public AjaxResult(){}
    public AjaxResult(Boolean success, String message){
        this.success = success;
        this.message = message;
    }
    public AjaxResult(Boolean success, String message, Object data){
        this.success = success;
        this.message = message;
        this.data = data;
    }
    // 2.链式语法
    public static AjaxResult me(){
        return new AjaxResult();
    }
    public AjaxResult setSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    public AjaxResult setMessage(String message) {
        this.message = message;
        return this;
    }
    public AjaxResult setData(Object data) {
        this.data = data;
        return this;
    }
    // 3.简化调用
2.Mapper接口和sql。

public static AjaxResult ok(){
        return new AjaxResult();
    }
    public static AjaxResult ok(Object data){
        return new AjaxResult().setData(data);
    }
    public static AjaxResult fail(){
        return new AjaxResult().setSuccess(false);
    }
    public static AjaxResult fail(Object data){
        return new AjaxResult().setSuccess(false).setData(data);
    }
}
import cn.cd.domain.User;
import java.util.List;
public interface UserMapper {
    // 添加
    // @Insert("insert into t_user(name, age, address) values (#{name},#{age},#
{address})")
    void add(User user);
    // 更新
    // @Update("update t_user set name=#{name}, age=#{age}, address=#{address} 
where id=#{id}")
    void update(User user);
    // 删除
    // @Delete("delete from t_user where id=#{id}")
    void delete(Long id);
    // 查询单个数据
    // @Select("select * from t_user where id=#{id}")
    User findById(Long id);
    // 查询所有
    // @Select("select * from t_user")
    List<User> findAll();
}
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.cd.mapper.UserMapper">
    <!-- useGeneratedKeys="true" keyColumn="id" keyProperty="id"获取自增id -->
    <insert id="add" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into t_user (name, age, address)
        values (#{username}, #{age}, #{address})
    </insert>
    <!-- 动态sql实现，动态更新 -->
    <update id="update">
        update t_user
3.Servie接口和实现类。

<set>
            <if test="username != null">
                name = #{username},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
        </set>
            where id = #{id}
    </update>
    <delete id="delete">
        delete from t_user where id = #{id}
    </delete>
    <!-- resultType自动映射，实体类字段名与表列名一样，类型一致，否则映射为null -->
    <select id="findById" resultType="cn.cd.domain.User">
        select * from t_user where id = #{id}
    </select>
    <!-- resultMap="UserMap"手动映射 -->
    <select id="findAll" resultMap="UserMap">
        select * from t_user
    </select>
    <resultMap id="UserMap" type="User">
        <id property="id" column="id"/>
        <result property="username" column="name"/>
        <result property="age" column="age"/>
        <result property="address" column="address"/>
    </resultMap>
</mapper>
import cn.cd.domain.User;
import java.util.List;
public interface UserService {
    void add(User user);
    void update(User user);
    void delete(Long id);
    User getOne(Long id);
    List<User> getAll();
}
import cn.cd.domain.User;
import cn.cd.mapper.UserMapper;
import cn.cd.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
4.Controller接口。

此接口并非interface，对于前端和运维的人来说，后端写的Controller，可以被直接访问和调用，就称
之为接口
import java.util.List;
@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.getAll();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getOne(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id")Long id){
6.接口测试工具。

对于Mapper和Service测试可以使用main方法，单元测试，SpringBoot测试。

推荐使用SpringBoot测
试
对于Controller，需要发送请求，所以可以通过：PostMan、Apifox、IDEA插件、Knife4j
IDEA插件：
Knife4j配置类：
        try {
            userService.delete(id);
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user){
        try {
            if(user.getId() == null){
                userService.add(user);
            }else{
                userService.update(user);
            }
            return AjaxResult.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.fail();
        }
    }
}
<!--添加Knife4j依赖-->
<dependency>
    <groupId>com.github.xiaoymin</groupId>
    <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>
    <version>4.3.0</version>
</dependency>
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;
@Configuration
@Slf4j
@EnableSwagger2WebMvc
public class Knife4jConfig {
    // 访问地址：http://localhost:8080/doc.html
    /**
     * 【重要】【重要】【重要】 指定Controller包路径 类路径
     */
    private static final String BASE_PACKAGE = "改成你的controller所在包名";
    /**
     * 组名
     */
    private static final String GROUP_NAME = "sz";
    /**
     * 主机名
     */
    private static final String HOST = "http://localhost";
    /**
     * 标题
     */
    private static final String TITLE = "xxxx-在线API文档";
    /**
     * 简介
     */
    private static final String DESCRIPTION = "xxxxx-在线API文档";
    /**
     * 服务条款URL
     */
    private static final String TERMS_OF_SERVICE_URL = 
"http://www.apache.org/licenses/LICENSE-2.0";
    /**
     * 联系人
     */
    private static final String CONTACT_NAME = "Java教学研发部";
    /**
     * 联系网址
     */
    private static final String CONTACT_URL = "http://localhost:8080";
    /**
     * 联系邮箱
     */
    private static final String CONTACT_EMAIL = "tom@qq.cn";
    /**
     * 版本号
     */
7.集成优化。

7.1.全局异常处理

自定义业务异常：
全局异常处理：
    private static final String VERSION = "2.0";
    public Knife4jConfig() {
        log.debug("创建配置类对象：Knife4jConfiguration");
    }
    @Bean
    public Docket docket() {
        return new Docket(DocumentationType.SWAGGER_2)
                .host(HOST)
                .apiInfo(apiInfo())
                .groupName(GROUP_NAME)
                .select()
                .apis(RequestHandlerSelectors.basePackage(BASE_PACKAGE))
                .paths(PathSelectors.any())
                .build();
    }
    private ApiInfo apiInfo() {
        return new ApiInfoBuilder()
                .title(TITLE)
                .description(DESCRIPTION)
                .termsOfServiceUrl(TERMS_OF_SERVICE_URL)
                .contact(new Contact(CONTACT_NAME, CONTACT_URL, CONTACT_EMAIL))
                .version(VERSION)
                .build();
    }
}
public class BusinessException extends RuntimeException {
    // 保留原始异常堆栈
    public BusinessException(String message) {
        super(message); // 关键：设置父类message
    }
}
//对加了@RestController的类【接口类】的增强 - 全局异常处理
@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {
    //当前方法用来处理业务异常
    @ExceptionHandler(BusinessException.class)
    public AjaxResult handleBusinessException(BusinessException e){
        return AjaxResult.me()
Controller优化：
7.2.批量删除。

插件推荐：下载Mybatisx插件
7.3.事务处理

事务是控制在Service中，类上用查询的事务控制，写方法上用注解 @Transactional即可
                .setSuccess(false)
                .setMessage(e.getMessage());
    }
    //当前方法用来处理其他异常
    @ExceptionHandler(Exception.class)
    public AjaxResult handleException(Exception e){
        e.printStackTrace();
        //log.error("系统异常:", e); // 建议添加日志记录
        return AjaxResult.me()
                .setSuccess(false)
                .setMessage("系统繁忙，请稍后重试");
    }
}
@DeleteMapping("/{id}")
public AjaxResult delete(@PathVariable("id") Long id) {
    userService.delete(id);
    return AjaxResult.ok();
}
@PutMapping
public AjaxResult update(@RequestBody User user) {
    if (user.getId() == null) {
        userService.add(user);
    } else {
        userService.update(user);
    }
    return AjaxResult.ok();
}
@PatchMapping
public AjaxResult patchDelete(@RequestBody Long[] ids) {
    userService.patchDelete(ids);
    return AjaxResult.ok();
}
<delete id="patchDelete">
    delete from t_user where id in
    <foreach item="id" collection="array" separator="," open="(" close=")">
        #{id}
    </foreach>
</delete>
7.4.高级查询分页查询。

高级查询：多条件动态查询，使用Mybatis的动态sql实现
分页查询：将大量的数据按照规定的页一页一页显示
UserQuery：接收分页参数
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    @Transactional
    @Override
    public void add(User user) {
        userMapper.add(user);
    }
    @Transactional
    @Override
    public void update(User user) {
        userMapper.update(user);
    }
    @Transactional
    @Override
    public void delete(Long id) {
        userMapper.delete(id);
    }
    @Override
    public User getOne(Long id) {
        return userMapper.findById(id);
    }
    @Override
    public List<User> getAll() {
        return userMapper.findAll();
    }
    @Transactional
    @Override
    public void patchDelete(Long[] ids) {
        userMapper.patchDelete(ids);
    }
}
@Data
public class UserQuery {
    // 分页参数
    private Integer currentPage = 1;
    private Integer pageSize = 5;
    // 计算当前页的起始下标
PageList：封装分页结果
UserController：编写分页接口
UserServiceImpl：分页业务
UserMapper：sql语句
    public Integer getStart() {
        return (this.currentPage - 1) * this.pageSize;
    }
    // 高级查询参数
    private String username;
    private String address;
}
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PageList<T> {
    private List<T> list = new ArrayList<>();
    private Integer totals = 0;
}
@PostMapping
public PageList<User> queryPage(@RequestBody UserQuery userQuery) {
    return userService.queryPage(userQuery);
}
@Override
public PageList<User> queryPage(UserQuery userQuery) {
    Integer totals = userMapper.queryCount(userQuery);
    if(totals == null || totals == 0){
        return new PageList<>();
    }
    List<User> list =userMapper.queryData(userQuery);
    return new PageList<>(list,totals);
}
// 查询总条数
Integer queryCount(UserQuery userQuery);
// 查询当前页分页数据
List<User> queryData(UserQuery userQuery);
<select id="queryData" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
    limit #{start},#{pageSize}
</select>
<select id="queryCount" resultType="java.lang.Integer">
    select count(1) from t_user
    <include refid="UserQuery"></include>
8.分页插件PageHelper使用。

导入依赖：
业务中：
Mapper文件中：
9.MybatisPlus的使用

</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<!--pagehelper分页插件-->
<dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper-spring-boot-starter</artifactId>
    <version>1.4.6</version>
</dependency>
@Override
public PageInfo<User> queryPage(UserQuery userQuery) {
    //开启分页
    PageHelper.startPage(userQuery.getCurrentPage(),userQuery.getPageSize());
    List<User> list = userMapper.queryPage(userQuery);
    return new PageInfo<>(list);
}
<select id="queryPage" resultType="cn.cd.domain.User">
    select * from t_user
    <include refid="UserQuery"></include>
</select>
<sql id="UserQuery">
    <where>
        <if test="username != null and username != ''">
            and username like concat('%',#{username},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
    </where>
</sql>
<dependency>
    <groupId>com.baomidou</groupId>
    <artifactId>mybatis-plus-boot-starter</artifactId>
    <version>3.5.2</version>
</dependency>
# mybatis配置 - 只要导入了mybatisPlus的包，这里就是mybatis-plus不能是mybatis
mybatis-plus:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mappers/*Mapper.xml
@Data
@TableName("t_user")
public class User {
    @TableId(value = "id", type = IdType.AUTO) // 主键映射
    private Long id;
    @TableField(value = "username")
    private String username;
    @TableField(value = "age")
    private Integer age;
    @TableField(value = "address")
    private String address;
}
@RestController
@RequestMapping("/user")
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping
    public List<User> getAll() {
        return userService.list();
    }
    @GetMapping("/{id}")
    public User getOne(@PathVariable("id") Long id) {
        return userService.getById(id);
    }
    @DeleteMapping("/{id}")
    public AjaxResult delete(@PathVariable("id") Long id) {
        userService.removeById(id);
        return AjaxResult.ok();
    }
    @PutMapping
    public AjaxResult update(@RequestBody User user) {
        if (user.getId() == null) {
            userService.save(user);
        } else {
            userService.update(user,null);
        }
        return AjaxResult.ok();。

}
    @PatchMapping
    public AjaxResult patchDelete(@RequestBody List<Long> ids) {
        userService.removeByIds(ids);
        return AjaxResult.ok();
    }
}
public interface UserService extends IService<User> {
}
@Service
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements 
UserService {
}
public interface UserMapper extends BaseMapper<User> {
}

教学大纲：

2025-06-23 14:12:01,702 - INFO
Loading faiss with AVX2 support.
2025-06-23 14:12:01,718 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 14:12:01,721 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 14:12:06,775 - INFO
Client: Address(host='127.0.0.1', port=42130)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 14:12:57,766 - INFO
Client: Address(host='127.0.0.1', port=46972)
Url: http://localhost:9001/v1/search
Body: b'{\r\n    "query": "\xe5\xae\x9e\xe8\xae\xad\xe5\xad\xa6\xe7\x94\x9f\xe6\x8f\x90\xe4\xba\xa4\xe6\x9d\x90\xe6\x96\x99\xe6\x9c\x89\xe5\x93\xaa\xe4\xba\x9b\xef\xbc\x9f",\r\n    "session_id": "test-teacher-2",\r\n    "isTeacher": false,\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "top_k": 2,\r\n    "search_mode": "existing"\r\n}'

2025-06-23 14:12:57,775 - INFO
Use pytorch device_name: cuda:0
2025-06-23 14:12:57,775 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 14:19:38,410 - INFO
Loading faiss with AVX2 support.
2025-06-23 14:19:38,424 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 14:19:38,428 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 14:19:43,490 - INFO
Client: Address(host='127.0.0.1', port=45218)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 14:21:04,514 - INFO
Client: Address(host='127.0.0.1', port=36864)
Url: http://localhost:9001/v1/search
Body: b'{\r\n    "query": "\xe5\xae\x9e\xe8\xae\xad\xe5\xad\xa6\xe7\x94\x9f\xe6\x8f\x90\xe4\xba\xa4\xe6\x9d\x90\xe6\x96\x99\xe6\x9c\x89\xe5\x93\xaa\xe4\xba\x9b\xef\xbc\x9f",\r\n    "session_id": "test-teacher-2",\r\n    "isTeacher": false,\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "top_k": 2,\r\n    "search_mode": "existing"\r\n}'

2025-06-23 14:21:04,522 - INFO
Use pytorch device_name: cuda:0
2025-06-23 14:21:04,523 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 14:22:39,203 - INFO
Client: Address(host='127.0.0.1', port=46514)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "target_count": 10\r\n}'

2025-06-23 14:22:39,207 - INFO
Use pytorch device_name: cuda:0
2025-06-23 14:22:39,207 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 14:22:39,458 - INFO
Client: 
Url: 
Data:
Generation Prompt:

请分析以下教学内容，提取出主要的知识点。知识点格式应该是"一级知识点/二级知识点"的形式，用"/"分隔。

教学内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- mybatis与springBoot的整合包 -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.3.1</version>
    </dependency>
    <!-- mysql驱动包 -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
3.配置信息。

3.1.自动配置

3.2.手动配置

4.数据准备

数据库、表、实体类
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>
</dependencies>
// 启动类,申明当前类是SpringBoot项目的启动类，默认端口是8080
@SpringBootApplication
// 扫描mapper接口所在的包，生成代理对象，保存到IOC容器中，后续给Service注入使用
@MapperScan("cn.cd.mapper")
public class App {
    public static void main(String[] args) {
        //使用启动类App去启动一个Spring应用
        SpringApplication.run(App.class, args);
    }
}
server:
  port: 8080 # 端口浩
  servlet:
    context-path: / # 上下文路径
# 连接数据库的四大金刚
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/edu?useUnicode=true&characterEncoding=utf-
8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
# mybatis配置
mybatis:
  type-aliases-package: cn.cd.domain
  mapper-locations: classpath:mapper/*Mapper.xml
create table t_user(
    id bigint primary key auto_increment,
    name varchar(50),
    age int,
    address varchar(100)
)
5.项目开发。

2.编写通用接口

1.工具类

封装增删改的返回结果，统一结果，方便维护和使用，查询用此类
import lombok.Data;
@Data
public class User {
    private Long id;
    private String username;
    private Integer age;
    private String address;
}
import lombok.Data;
@Data
public class AjaxResult {
    private Boolean success = true;
    private String message = "操作成功";
    private Object data;
    // 1.构造器
    public AjaxResult(){}
    public AjaxResult(Boolean success, String message){
        this.success = success;
        this.message = message;
    }
    public AjaxResult(Boolean success, String message, Object data){
        this.success = success;
        this.message = message;
        this.data = data;
    }
    // 2.链式语法
    public static AjaxResult me(){
        return new AjaxResult();
    }
    public AjaxResult setSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    public AjaxResult setMessage(String message) {
        this.message = message;
        return this;
    }
    public AjaxResult setData(Object data) {
        this.data = data;
        return this;
    }
    // 3.简化调用
2.Mapper接口和sql。

public static AjaxResult ok(){
        return new AjaxResult();
    }
    public static AjaxResult ok(Object data){
        return new AjaxResult().setData(data);
    }
    public static AjaxResult fail(){
        return new AjaxResult().setSuccess(false);
    }
    public static AjaxResult fail(Object data){
        return new AjaxResult().setSuccess(false).setData(data);
    }
}
import cn.cd.domain.User;
import java.util.List;
public interf  # 限制内容长度避免过长

请提取出3-6个最重要的知识点，每个知识点用"一级知识点/二级知识点"的格式表示，多个知识点用换行分隔。

知识点：


2025-06-23 14:25:15,205 - INFO
Loading faiss with AVX2 support.
2025-06-23 14:25:15,220 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 14:25:15,223 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 14:25:20,288 - INFO
Client: Address(host='127.0.0.1', port=58882)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 14:27:07,893 - INFO
Client: Address(host='127.0.0.1', port=41266)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "target_count": 10\r\n}'

2025-06-23 14:27:07,897 - INFO
Use pytorch device_name: cuda:0
2025-06-23 14:27:07,897 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 14:27:08,507 - INFO
Client: 
Url: 
Data:
Generation Prompt:

请分析以下教学内容，提取出主要的知识点。知识点格式应该是"一级知识点/二级知识点"的形式，用"/"分隔。

教学内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>  # 限制内容长度避免过长

请提取出3-6个最重要的知识点，每个知识点用"一级知识点/二级知识点"的格式表示，多个知识点用换行分隔。

知识点：


2025-06-23 14:28:40,135 - INFO
Loading faiss with AVX2 support.
2025-06-23 14:28:40,150 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 14:28:40,154 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 14:28:45,218 - INFO
Client: Address(host='127.0.0.1', port=52562)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 14:29:42,588 - INFO
Client: Address(host='127.0.0.1', port=57554)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "target_count": 10\r\n}'

2025-06-23 14:29:42,592 - INFO
Use pytorch device_name: cuda:0
2025-06-23 14:29:42,592 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 14:29:43,192 - INFO
Client: 
Url: 
Data:
Generation Prompt:

请分析以下教学内容，提取出主要的知识点。知识点格式应该是"一级知识点/二级知识点"的形式，用"/"分隔。

教学内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>  # 限制内容长度避免过长

请提取出3-6个最重要的知识点，每个知识点用"一级知识点/二级知识点"的格式表示，多个知识点用换行分隔。

知识点：


2025-06-23 14:55:53,994 - INFO
Loading faiss with AVX2 support.
2025-06-23 14:55:54,009 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 14:55:54,012 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 14:55:59,072 - INFO
Client: Address(host='127.0.0.1', port=44764)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 14:56:32,884 - INFO
Client: Address(host='127.0.0.1', port=56684)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n    "session_id": "test-teacher-1",\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "target_count": 10\r\n}'

2025-06-23 14:56:32,887 - INFO
Use pytorch device_name: cuda:0
2025-06-23 14:56:32,887 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 14:56:33,515 - INFO
Client: 
Url: 
Data:
Generation Prompt:

请分析以下教学内容，提取出主要的知识点。知识点格式应该是"一级知识点/二级知识点"的形式，用"/"分隔。

教学内容：
1.Spring框架

定义：Spring 是一个开源的 Java 容器框架，用于简化企业级应用开发。它提供了全面的基础设施支
持，比如控制翻转（IOC）和面向切面编程（AOP）
作用： 
控制反转（IOC）：自动管理对象及其之间的依赖关系（依赖注入DI实现）
面向切面编程 （AOP）：将通用逻辑（如日志、事务）与业务逻辑分离，方便维护
整合其他框架：方便集成 Hibernate、MyBatis、Spring MVC 等，整合原理就是管理这些框架的核
心对象
核心模块：
spring-core：核心工具类
spring-beans & spring-context：Bean 容器
spring-aop：AOP 支持
2.SpringMvc框架

定义：SpringMVC 是表现层框架，同时也是 Spring 的一部分，专门用于构建 Web 应用程序，基于 
MVC（Model-View-Controller）架构模式
作用：
请求处理：通过注解（如 @RequestMapping）映射 URL 到方法
支持 RESTful 风格 API
数据绑定与验证：自动将请求参数绑定到 Java 对象并进行校验，有自动转换功能
常用注解：
@Controller：定义控制器类，作用是创建当前类的对象
@RequestMapping / @GetMapping / @PostMapping：URL 请求映射，什么样的请求执行那一
个Controller方法
@ResponseBody：响应 JSON 数据给前端
@PathVariable / @RequestParam：获取 URL 参数
3.Mybatis框架

定义：MyBatis 是一个轻量级的持久层/数据层框架，简化数据库操作，提供表数据 与 Java 对象之间的
映射，支持自动映射resultType和手动映射resultMap
作用：
SQL 与 Java 对象映射：自动将数据库结果集转换为 Java 对象
动态 SQL：支持条件查询、批量插入等复杂 SQL 编写
灵活控制 SQL：不像 Hibernate 全自动，开发者可以精细控制 SQL
SQL分离：通过接口 + XML 实现数据库操作
核心组件：
SqlSessionFactory：创建会话工厂
SqlSession：执行 SQL 和获取映射器
Mapper 接口 + XML 映射文件：定义 SQL 与对象关系
4.SpringBoot框架

定义：SpringBoot 是 一个简化启动和配置的扩展框架，用于快速构建生产级别的 Spring 应用，开箱即
用，内嵌服务器，自动配置
作用：
自动配置：根据引入的依赖自动配置 Spring 组件
起步依赖（Starter Dependencies）：简化 Maven/Gradle 配置
内嵌 Tomcat/Jetty：无需部署 WAR 文件，直接运行 Jar 包
外部化配置：使用 application.properties 或 application.yml 自定义配置
5.SpringBoot集成SSM

1.环境搭建流程

1.创建项目

创建普通的maven项目即可
注意：IDEA也支持了直接创建SpringBoot项目
2.导入依赖

<properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
<!-- 继承SpringBoot的启动项目，继承之后可以共享父项目和祖先项目的配置和各种信息：依赖管理，编
译版本，插件，字符编码，配置文件等 -->
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.6.13</version>
</parent>
<dependencies>
    <!-- web starter包：开发controller的必须依赖，自带tomcat -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>  # 限制内容长度避免过长

请提取出3-6个最重要的知识点，每个知识点用"一级知识点/二级知识点"的格式表示，多个知识点用换行分隔。

知识点：


2025-06-23 14:56:51,868 - INFO
Client: Address(host='127.0.0.1', port=39408)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n    "session_id": "test-teacher-2",\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "target_count": 10\r\n}'

2025-06-23 14:56:51,869 - INFO
Use pytorch device_name: cuda:0
2025-06-23 14:56:51,869 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 14:56:52,104 - INFO
Client: 
Url: 
Data:
Generation Prompt:

请分析以下教学内容，提取出主要的知识点。知识点格式应该是"一级知识点/二级知识点"的形式，用"/"分隔。

教学内容：
实训学生提交材料清单

每个项目小组提交一份《项目立项申请书》（文件名格式：项目立项申请书-XX小组）
每个项目小组提交一份《项目开发计划表》（文件名格式：项目开发计划表-XX小组）
每个项目小组提交一份《项目设计报告》（文件名格式：项目设计报告-XX小组）
每个项目小组提交一份《实习报告》（文件名格式：实习报告-XX小组）
实习报告中应包括需求分析、概要设计、详细设计、测试结果、附录等。 
设计报告中应首先包括设计题目、班级、姓名、学号、完成日期。 
概要设计中应包括设计思想、实现方法、系统中主要模块及各模块间的关系的描述。 
每个项目小组提交一份《项目源代码》（文件名格式：源代码-XX小组）
每个项目小组提交一份《项目答辩PPT》（文件名格式：项目答辩PPT-XX小组）
每个项目小组提交一份《项目演示视频》（文件名格式：项目演示视频-XX小组）
每人每天提交《工作日报》（文件名格式：工作日志-XXX）
每人提交一份《个人实习总结》（文件名格式：个人实习总结-XXX）
字数要求1500~2000字。
内容包含学习内容和过程，取得的成果、收获和体会，可附带实习过程展示、照片等。

注：
1-7项小组提交
8-9项个人提交  # 限制内容长度避免过长

请提取出3-6个最重要的知识点，每个知识点用"一级知识点/二级知识点"的格式表示，多个知识点用换行分隔。

知识点：


2025-06-23 14:59:41,173 - INFO
Loading faiss with AVX2 support.
2025-06-23 14:59:41,188 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 14:59:41,192 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 14:59:46,250 - INFO
Client: Address(host='127.0.0.1', port=47904)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 15:03:33,348 - INFO
Client: Address(host='127.0.0.1', port=55088)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n    "session_id": "test-teacher-2",\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "target_count": 10\r\n}'

2025-06-23 15:03:33,355 - INFO
Use pytorch device_name: cuda:0
2025-06-23 15:03:33,355 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 15:03:33,966 - INFO
Client: 
Url: 
Data:
Generation Prompt:
分析以下教学内容，提取3-5个主要知识点，格式为"一级知识点/二级知识点"：

实训学生提交材料清单

每个项目小组提交一份《项目立项申请书》（文件名格式：项目立项申请书-XX小组）
每个项目小组提交一份《项目开发计划表》（文件名格式：项目开发计划表-XX小组）
每个项目小组提交一份《项目设计报告》（文件名格式：项目设计报告-XX小组）
每个项目小组提交一份《实习报告》（文件名格式：实习报告-XX小组）
实习报告中应包括需求分析、概要设计、详细设计、测试结果、附录等。 
设计报告中应首先包括设计题目、班级、姓名、学号、完成日期。 
概要设计中应包括设计思想、实现方法、系统中主要模块及各模块间的关系的描述。 
每个项目小组提交一份《项目源代码》（文件名格式：源代码-XX小组）
每个项目小组提交一份《项目答辩PPT》（文件名格式：项目答辩PPT-XX小组）
每个项目小组提交一份《项目演示视频》（文件名格式：项目演示视频-XX小组）
每人每天提交《工作日报》（文件名格式：工作日志-XXX）
每人提交一份《个人实习总结》（文件名格式：个人实习总结-XXX）
字数要求1500~2000字。
内容包含学习内容和过程，取得的成果、收获和体会，可附带实习过程展示、照片等。

注：
1-7项小组提交
8-9项个人提交

知识点：

2025-06-23 15:05:05,148 - INFO
Client: Address(host='127.0.0.1', port=46104)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n    "session_id": "test-teacher-2",\r\n    "courseID": "1",\r\n    "lessonNum": "1",\r\n    "target_count": 10\r\n}'

2025-06-23 15:05:05,150 - INFO
Use pytorch device_name: cuda:0
2025-06-23 15:05:05,150 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 15:05:05,369 - INFO
Client: 
Url: 
Data:
Generation Prompt:
分析以下教学内容，提取3-5个主要知识点，格式为"一级知识点/二级知识点"：

实训学生提交材料清单

每个项目小组提交一份《项目立项申请书》（文件名格式：项目立项申请书-XX小组）
每个项目小组提交一份《项目开发计划表》（文件名格式：项目开发计划表-XX小组）
每个项目小组提交一份《项目设计报告》（文件名格式：项目设计报告-XX小组）
每个项目小组提交一份《实习报告》（文件名格式：实习报告-XX小组）
实习报告中应包括需求分析、概要设计、详细设计、测试结果、附录等。 
设计报告中应首先包括设计题目、班级、姓名、学号、完成日期。 
概要设计中应包括设计思想、实现方法、系统中主要模块及各模块间的关系的描述。 
每个项目小组提交一份《项目源代码》（文件名格式：源代码-XX小组）
每个项目小组提交一份《项目答辩PPT》（文件名格式：项目答辩PPT-XX小组）
每个项目小组提交一份《项目演示视频》（文件名格式：项目演示视频-XX小组）
每人每天提交《工作日报》（文件名格式：工作日志-XXX）
每人提交一份《个人实习总结》（文件名格式：个人实习总结-XXX）
字数要求1500~2000字。
内容包含学习内容和过程，取得的成果、收获和体会，可附带实习过程展示、照片等。

注：
1-7项小组提交
8-9项个人提交

知识点：

2025-06-23 15:42:49,853 - INFO
Loading faiss with AVX2 support.
2025-06-23 15:42:49,868 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 15:42:49,872 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 15:42:54,934 - INFO
Client: Address(host='127.0.0.1', port=58506)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 15:48:58,472 - INFO
Client: Address(host='127.0.0.1', port=45780)
Url: http://localhost:9001/v1/chat/completions
Body: b'{\r\n  "messages": [        \n    {\r\n      "role": "user",     \n      "content": "hello",\r\n      "raw": false       \n    }\r\n  ],                   \r\n  "session_id": "1"     \n}'

2025-06-23 15:48:58,479 - INFO
Client: Address(host='127.0.0.1', port=45780)
Url: http://localhost:9001/v1/chat/completions
Data:
Start Waiting. RequestsNum: 1

2025-06-23 15:48:58,479 - INFO
Client: 
Url: 
Data:
Generation Prompt:
User: hello

Assistant:

2025-06-23 15:49:00,797 - INFO
Client: Address(host='127.0.0.1', port=45780)
Url: http://localhost:9001/v1/chat/completions
Body: {"max_tokens": null, "temperature": null, "top_p": null, "presence_penalty": null, "frequency_penalty": null, "penalty_decay": null, "top_k": null, "global_penalty": null, "state": null, "messages": [{"content": "hello", "role": "user", "name": null, "raw": false}], "model": "rwkv", "stream": false, "stop": ["\n\nUser", "\n\nQuestion", "\n\nQ", "\n\nHuman", "\n\nBob", "\n\nAssistant", "\n\nAnswer", "\n\nA", "\n\nBot", "\n\nAlice", "\n\nObservation", "\n\nUser", "\n\nAss"], "tools": null, "tool_choice": "auto", "user_name": null, "assistant_name": null, "system_name": null, "presystem": false, "session_id": "1", "isTeacher": false, "courseID": null}
Data:
 Hello! How can I assist you today?
Finished. RequestsNum: 0

2025-06-23 15:54:37,901 - INFO
Error log_middleware request:
Stream consumed
2025-06-23 15:54:49,895 - INFO
Error log_middleware request:
Stream consumed
2025-06-23 15:56:28,258 - INFO
Error log_middleware request:
Stream consumed
2025-06-23 15:57:27,516 - INFO
Error log_middleware request:
Stream consumed
2025-06-23 15:58:18,071 - INFO
Error log_middleware request:
Stream consumed
2025-06-23 15:59:29,059 - INFO
Error log_middleware request:
Stream consumed
2025-06-23 15:59:29,077 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 16:03:32,763 - INFO
Client: Address(host='127.0.0.1', port=36972)
Url: http://localhost:9001/v1/download/resource/teacheros/1/操作系统-进程.docx
Body: b''

2025-06-23 16:04:06,483 - INFO
Client: Address(host='127.0.0.1', port=33196)
Url: http://localhost:9001/v1/download/resource/teacheros/1/操作系统-进程.md
Body: b''

2025-06-23 16:06:05,955 - INFO
Client: Address(host='127.0.0.1', port=37606)
Url: http://localhost:9001/v1/search
Body: b'{\r\n  "query": "\xe4\xbb\x80\xe4\xb9\x88\xe6\x98\xaf\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x9f",\r\n  "session_id": "teacheros",\r\n  "isTeacher": true,\r\n  "courseID": "1",\r\n  "lessonNum": "1",\r\n  "top_k": 3,\r\n  "search_mode": "existing"\r\n}'

2025-06-23 16:06:05,959 - INFO
Use pytorch device_name: cuda:0
2025-06-23 16:06:05,960 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 16:06:21,373 - INFO
Client: Address(host='127.0.0.1', port=54942)
Url: http://localhost:9001/v1/search
Body: b'{\r\n  "query": "\xe4\xbb\x80\xe4\xb9\x88\xe6\x98\xaf\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x9f",\r\n  "session_id": "teacheros",\r\n  "isTeacher": true,\r\n  "courseID": "1",\r\n  "lessonNum": "1",\r\n  "top_k": 3,\r\n  "search_mode": "existing"\r\n}'

2025-06-23 16:06:21,374 - INFO
Use pytorch device_name: cuda:0
2025-06-23 16:06:21,374 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 16:06:23,255 - INFO
Client: Address(host='127.0.0.1', port=54942)
Url: http://localhost:9001/v1/search
Body: b'{\r\n  "query": "\xe4\xbb\x80\xe4\xb9\x88\xe6\x98\xaf\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x9f",\r\n  "session_id": "teacheros",\r\n  "isTeacher": true,\r\n  "courseID": "1",\r\n  "lessonNum": "1",\r\n  "top_k": 3,\r\n  "search_mode": "existing"\r\n}'

2025-06-23 16:06:23,256 - INFO
Use pytorch device_name: cuda:0
2025-06-23 16:06:23,257 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 16:07:33,795 - INFO
Client: Address(host='127.0.0.1', port=58308)
Url: http://localhost:9001/v1/search
Body: b'{\r\n  "query": "\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xb5\x84\xe6\xba\x90\xe5\x88\x86\xe9\x85\x8d\xe5\x92\x8c\xe8\xb0\x83\xe5\xba\xa6\xe7\x9a\x84\xe5\x9f\xba\xe6\x9c\xac\xe5\x8d\x95\xe4\xbd\x8d\xe6\x98\xaf\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x9f",\r\n  "session_id": "teacheros",\r\n  "isTeacher": true,\r\n  "courseID": "1",\r\n  "lessonNum": "1",\r\n  "top_k": 3,\r\n  "search_mode": "existing"\r\n}'

2025-06-23 16:07:33,796 - INFO
Use pytorch device_name: cuda:0
2025-06-23 16:07:33,797 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 16:08:49,441 - INFO
Client: Address(host='127.0.0.1', port=52510)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "teacheros",\r\n    "courseID": "1", \r\n    "lessonNum": "1",\r\n    "max_words": 1000\r\n}'

2025-06-23 16:08:49,445 - INFO
Client: 
Url: 
Data:
Generation Prompt:
请根据以下内容生成一份教学大纲，字数控制在1000字以内：

大纲应包含：
1. 学习目标
2. 教学内容
3. 教学重点
4. 教学难点
5. 教学方法
6. 教学步骤
7. 课堂练习
8. 总结

内容：
📘 操作系统：进程章节核心知识点
一、进程的基本概念
进程（Process）：程序的一次执行过程，是操作系统进行资源分配和调度的基本单位。
程序 vs 进程：
程序：静态的代码；
进程：动态的执行实体。
进程的组成：
程序代码（Text Section）
程序计数器（Program Counter）
处理器寄存器、堆（Heap）、栈（Stack）
PCB（进程控制块）：操作系统管理进程的关键数据结构。

二、进程状态与状态转换
常见的进程状态：
就绪（Ready）：已分配资源，等待CPU；
运行（Running）：正在使用CPU；
等待/阻塞（Waiting/Blocked）：等待I/O或其他事件；
终止（Terminated）：执行完毕或异常终止。
状态转换图：需要图示（建议课堂画图讲解）。

三、进程控制块（PCB, Process Control Block）
包含信息：
进程标识符（PID）
程序计数器
寄存器状态
调度信息（优先级、队列位置）
内存管理信息
I/O状态信息
PCB 是进程切换（context switch）的核心。

四、进程的创建与终止
创建方式：
父进程创建子进程，如 fork()（UNIX系统）
使用 exec() 系列加载新程序
终止方式：
正常退出（exit）
异常终止（错误、被其他进程杀死）
父进程终止子进程
孤儿进程与僵尸进程：
孤儿进程：父进程先结束，子进程被 init 收养；
僵尸进程：子进程已终止但未被回收（wait()）。

五、进程调度与切换
调度的目标：高效使用CPU、响应及时、公平性。
调度算法（简要）：
先来先服务（FCFS）
短作业优先（SJF）
时间片轮转（RR）
优先级调度
进程切换（Context Switch）：
保存当前进程状态到PCB；
恢复新进程的状态。

六、用户态与内核态
用户态：执行普通应用程序；
内核态：执行操作系统代码（如系统调用、异常处理）；
通过系统调用从用户态切换到内核态（例如：文件读写、进程管理等操作）。

七、线程 vs 进程（拓展，备选内容）
线程是轻量级的进程；
多线程共享同一进程资源；
引入线程的目的是提高程序并发性、减少切换开销。

✅ 建议学生课后复习任务
画出进程状态转换图；
理解 fork() 和 exec() 的执行流程；
编写简单的 C 程序演示进程创建与终止；
比较不同调度算法在不同任务负载下的表现。

教学大纲：

2025-06-23 16:12:44,858 - INFO
Client: Address(host='127.0.0.1', port=51256)
Url: http://localhost:9001/v1/create/outline
Body: b'{\r\n    "session_id": "teacheros",\r\n    "courseID": "1", \r\n    "lessonNum": "1"\r\n}'

2025-06-23 16:12:44,860 - INFO
Client: 
Url: 
Data:
Generation Prompt:
请根据以下内容生成一份教学大纲，字数控制在1000字以内：

大纲应包含：
1. 学习目标
2. 教学内容
3. 教学重点
4. 教学难点
5. 教学方法
6. 教学步骤
7. 课堂练习
8. 总结

内容：
📘 操作系统：进程章节核心知识点
一、进程的基本概念
进程（Process）：程序的一次执行过程，是操作系统进行资源分配和调度的基本单位。
程序 vs 进程：
程序：静态的代码；
进程：动态的执行实体。
进程的组成：
程序代码（Text Section）
程序计数器（Program Counter）
处理器寄存器、堆（Heap）、栈（Stack）
PCB（进程控制块）：操作系统管理进程的关键数据结构。

二、进程状态与状态转换
常见的进程状态：
就绪（Ready）：已分配资源，等待CPU；
运行（Running）：正在使用CPU；
等待/阻塞（Waiting/Blocked）：等待I/O或其他事件；
终止（Terminated）：执行完毕或异常终止。
状态转换图：需要图示（建议课堂画图讲解）。

三、进程控制块（PCB, Process Control Block）
包含信息：
进程标识符（PID）
程序计数器
寄存器状态
调度信息（优先级、队列位置）
内存管理信息
I/O状态信息
PCB 是进程切换（context switch）的核心。

四、进程的创建与终止
创建方式：
父进程创建子进程，如 fork()（UNIX系统）
使用 exec() 系列加载新程序
终止方式：
正常退出（exit）
异常终止（错误、被其他进程杀死）
父进程终止子进程
孤儿进程与僵尸进程：
孤儿进程：父进程先结束，子进程被 init 收养；
僵尸进程：子进程已终止但未被回收（wait()）。

五、进程调度与切换
调度的目标：高效使用CPU、响应及时、公平性。
调度算法（简要）：
先来先服务（FCFS）
短作业优先（SJF）
时间片轮转（RR）
优先级调度
进程切换（Context Switch）：
保存当前进程状态到PCB；
恢复新进程的状态。

六、用户态与内核态
用户态：执行普通应用程序；
内核态：执行操作系统代码（如系统调用、异常处理）；
通过系统调用从用户态切换到内核态（例如：文件读写、进程管理等操作）。

七、线程 vs 进程（拓展，备选内容）
线程是轻量级的进程；
多线程共享同一进程资源；
引入线程的目的是提高程序并发性、减少切换开销。

✅ 建议学生课后复习任务
画出进程状态转换图；
理解 fork() 和 exec() 的执行流程；
编写简单的 C 程序演示进程创建与终止；
比较不同调度算法在不同任务负载下的表现。

教学大纲：

2025-06-23 16:14:36,057 - INFO
Client: Address(host='127.0.0.1', port=43524)
Url: http://localhost:9001/v1/exercise
Body: b'{\r\n  "session_id": "teacheros",\r\n  "courseID": "1",\r\n  "lessonNum": "1",\r\n  "target_count": 10\r\n}'

2025-06-23 16:14:36,063 - INFO
Use pytorch device_name: cuda:0
2025-06-23 16:14:36,063 - INFO
Load pretrained SentenceTransformer: /data-extend/wangqianxu/wqxspace/RWKV/model/m3e-base
2025-06-23 16:14:36,298 - INFO
Client: 
Url: 
Data:
Generation Prompt:
分析以下教学内容，提取3-5个主要知识点，格式为"一级知识点/二级知识点"：

📘 操作系统：进程章节核心知识点
一、进程的基本概念
进程（Process）：程序的一次执行过程，是操作系统进行资源分配和调度的基本单位。
程序 vs 进程：
程序：静态的代码；
进程：动态的执行实体。
进程的组成：
程序代码（Text Section）
程序计数器（Program Counter）
处理器寄存器、堆（Heap）、栈（Stack）
PCB（进程控制块）：操作系统管理进程的关键数据结构。

二、进程状态与状态转换
常见的进程状态：
就绪（Ready）：已分配资源，等待CPU；
运行（Running）：正在使用CPU；
等待/阻塞（Waiting/Blocked）：等待I/O或其他事件；
终止（Terminated）：执行完毕或异常终止。
状态转换图：需要图示（建议课堂画图讲解）。

三、进程控制块（PCB, Process Control Block）
包含信息：
进程标识符（PID）
程序计数器
寄存器状态
调度信息（优先级、队列位置）
内存管理信息
I/O状态信息
PCB 是进程切换（context switch）的核心。

四、进程的创建与终止
创建方式：
父进程创建子进程，如 fork()（UNIX系统）
使用 exec() 系列加载新程序
终止方式：
正常退出（exit）
异常终止（错误、被其他进程杀死）
父进程终止子进程
孤儿进程与僵尸进程：
孤儿进程：父进程先结束，子进程被 init 收养；
僵尸进程：子进程已终止但未被回收（wait()）。

五、进程调度与切换
调度的目标：高效使用CPU、响应及时、公平性。
调度算法（简要）：
先来先服务（FCFS）
短作业优先（SJF）
时间片轮转（RR）
优先级调度
进程切换（Context Switch）：
保存当前进程状态到PCB；
恢复新进程的状态。

六、用户态与内核态
用户态：执行普通应用程序；
内核态：执行操作系统代码（如系统调用、异常处理）；
通过系统调用从用户态切换到内核态（例如：文件读写、进程管理等操作）。

七、线程 vs 进程（拓展，备选内容）
线程是轻量级的进程；
多线程共享同一进程资源；
引入线程的目的是提高程序并发性、减少切换开销。

✅ 建议学生课后复习任务
画出进程状态转换图；
理解 fork() 和 exec() 的执行流程；
编写简单的 C 程序演示进程创建与终止；
比较不同调度算法在不同任务负载下的表现。

知识点：

2025-06-23 16:40:38,081 - INFO
Loading faiss with AVX2 support.
2025-06-23 16:40:38,095 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 16:40:38,099 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 16:40:43,165 - INFO
Client: Address(host='127.0.0.1', port=36902)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 16:42:18,068 - INFO
Client: Address(host='127.0.0.1', port=47062)
Url: http://localhost:9001/v1/chat/completions
Body: b'{\r\n  "messages": [        \n    {\r\n      "role": "user",     \n      "content": "hello",\r\n      "raw": false       \n    }\r\n  ],                   \r\n  "session_id": "1"     \n}'

2025-06-23 16:42:26,341 - INFO
Client: Address(host='127.0.0.1', port=47798)
Url: http://localhost:9001/v1/chat/completions
Body: b'{\r\n  "messages": [        \n    {\r\n      "role": "user",     \n      "content": "hello",\r\n      "raw": false       \n    }\r\n  ],                   \r\n  "sessionId": "1"     \n}'

2025-06-23 16:42:26,342 - INFO
Client: Address(host='127.0.0.1', port=47798)
Url: http://localhost:9001/v1/chat/completions
Data:
Start Waiting. RequestsNum: 1

2025-06-23 16:42:26,343 - INFO
Client: 
Url: 
Data:
Generation Prompt:
User: hello

Assistant: 

2025-06-23 16:42:28,846 - INFO
Client: Address(host='127.0.0.1', port=47798)
Url: http://localhost:9001/v1/chat/completions
Data:
Generation Complete. RequestsNum: 0

2025-06-23 17:19:25,551 - INFO
Loading faiss with AVX2 support.
2025-06-23 17:19:25,566 - INFO
Successfully loaded faiss with AVX2 support.
2025-06-23 17:19:25,570 - INFO
Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 17:19:30,632 - INFO
Client: Address(host='127.0.0.1', port=42998)
Url: http://127.0.0.1:8001/switch-model
Body: b'{\n            "model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", \n            "strategy": "cuda fp16", \n            "tokenizer": "", \n            "customCuda": true, \n            "deploy": false\n        }'

2025-06-23 17:20:17,443 - INFO
Client: Address(host='127.0.0.1', port=42998)
Url: http://127.0.0.1:8001/switch-model
Body: {"model": "/data-extend/wangqianxu/wqxspace/RWKV/model/RWKV-x060-World-7B-v3-20241112-ctx4096.pth", "strategy": "cuda fp16", "tokenizer": "", "customCuda": true, "deploy": false}
Data:
Exception: CUDA out of memory. Tried to allocate 112.00 MiB. GPU 0 has a total capacty of 23.53 GiB of which 45.94 MiB is free. Process 184428 has 1.91 GiB memory in use. Process 368898 has 1.91 GiB memory in use. Process 528512 has 2.83 GiB memory in use. Process 528721 has 2.82 GiB memory in use. Process 535372 has 10.46 GiB memory in use. Including non-PyTorch memory, this process has 3.52 GiB memory in use. Of the allocated memory 2.89 GiB is allocated by PyTorch, and 192.91 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF

